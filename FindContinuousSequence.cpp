#include <vector>

using namespace std;

/*
* 小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。
* 但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。
* 没多久,他就得到另一组连续正数和为100的序列:18,19,20,21,22。现在把问题交给你,
* 你能不能也很快的找出所有和为S的连续正数序列? Good Luck!
*
* 输出描述:
* 输出所有和为S的连续正数序列。序列内按照从小至大的顺序，序列间按照开始数字从小到大的顺序
*/

class Solution {
public:
	vector<vector<int> > FindContinuousSequence(int sum) {
		if (sum <= 2)
			return vector<vector<int>>();
		vector<vector<int>> vecRes;
		int small = 1;
		int big = 2;
		int curSum = small + big;
		while (small < ((sum + 1) / 2))
		{
			if (curSum == sum)
			{
				vector<int> vecCs;
				for (int i = small; i <= big; ++i)
					vecCs.push_back(i);
				vecRes.push_back(vecCs);
			}

			if (curSum > sum)
			{
				curSum -= small;
				small++;
			}
			else
			{
				++big;
				curSum += big;
			}
		}

		return vecRes;
	}
};


// 2018.6.19
class Solution1 {
public:
	vector<vector<int> > FindContinuousSequence(int sum) {
		if (sum <= 2)
			return vector<vector<int>>();

		vector<vector<int>> vecRes;
		int small = 1, big = 2;
		int curSum = small + big;
		while (small < (sum + 1) / 2)
		{
			if (curSum == sum)
			{
				vector<int> vec;
				for (int i = small; i <= big; ++i)
					vec.push_back(i);
				vecRes.push_back(vec);
				curSum -= small;
				small++;
			}
			else if (curSum < sum)
			{
				big++;
				curSum += big;
			}
			else
			{
				curSum -= small;
				small++;
			}
		}

		return vecRes;
	}
};

int main()
{
	Solution s;
	s.FindContinuousSequence(10);
	return 0;
}